diff --git a/src/delta_single.js b/src/delta_single.js
index 5aa93ce..a4e9886 100644
--- a/src/delta_single.js
+++ b/src/delta_single.js
@@ -134,6 +134,9 @@ function main(options) {
             logging.logDone(smallest);
         }
     }
+
+    log_locs();
+
     return performedAtLeastOneReduction;
 
     function minimise_array(array, nonempty) {
@@ -346,12 +349,51 @@ function main(options) {
         };
     }
 
+    //Checks if two AST nodes are same
+    function isNodeEqual(a, b){
+        //Two AST nodes can be similar even if their loc properties that are added by our patch are different.
+        var regex = /"loc":{"start":{"line":[0-9]*,"column":[0-9]*},"end":{"line":[0-9]*,"column":[0-9]*}}/g;
+        if(JSON.stringify(a).replace(regex, "") === JSON.stringify(b).replace(regex, "")) return true;
+        return false;
+    }
+
+    //Prints the loc information to smalles_loc.json file
+    function log_locs() {
+        let locations = new Set();
+        for(index in state.ast.body){
+            var e = JSON.stringify(state.ast.body[index]);
+            var matches = new Set(e.match(/"loc":{"start":{"line":[0-9]*,"column":[0-9]*},"end":{"line":[0-9]*,"column":[0-9]*}}/g));
+
+            for(var it = matches.values(), val=null; val=it.next().value;){
+                locations.add("  {" + val + "}");
+            }
+        }
+        var path = smallest.substring(0,smallest.lastIndexOf(".")) + "_loc.json";
+        if (!options.multifile_mode)
+            if (options.out !== null)
+                path = options.out.substring(0, options.out.lastIndexOf(".")) + "_loc.json";
+
+        fs.writeFileSync(path, "[\n" + Array.from(locations).join(",\n") + "\n]");
+        logging.logLocDone(path);
+    }
+
+
     function rebuildAST() {
         var input = fs.readFileSync(smallest);
         // hack to make JSON work
         if (state.ext === 'json')
             input = '(' + input + ')';
-        state.ast = file_util.parse(input);
+        //maps the locations in the new AST to the original AST
+        var temp_ast = file_util.parse(input, {loc: true});
+        if(state.ast){
+            for(t of temp_ast.body){
+                for(s of state.ast.body){
+                    if(isNodeEqual(t, s))
+                        t = s;
+                }
+            }
+        }
+        state.ast = temp_ast;
     }
 
     function test() {
